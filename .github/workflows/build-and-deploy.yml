name: Build and Deploy Service

on:
  workflow_call:
    inputs:
      ecr-repository:
        required: true
        type: string
      ecs-service:
        required: true
        type: string
      ecs-task-definition:
        required: true
        type: string
      container-name:
        required: true
        type: string
      ecs-cluster:
        required: true
        type: string
      folder-name:
        required: true
        type: string
      always-override-limit:
        required: false
        type: string
      logout-return-url:
        required: true
        type: string
      auth-callback:
        required: true
        type: string

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ${{ inputs.folder-name }}
        docker build --build-arg ALWAYS_OVERRIDE_LIMIT=${{ inputs.always-override-limit }} --build-arg API_IDENTIFIER=${{ secrets.API_IDENTIFIER }} --build-arg API_URL=${{ secrets.API_URL_NONPROD }} --build-arg AUTH_CALLBACK=${{ inputs.auth-callback }} --build-arg AUTH_CLIENT_ID=${{ secrets.AUTH_CLIENT_ID }} --build-arg AUTH_DOMAIN=${{ secrets.AUTH_DOMAIN }} --build-arg LOGOUT_RETURN_URL=${{ inputs.logout-return-url }} --build-arg WEBPACK_MODE=${{ secrets.WEBPACK_MODE }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ inputs.ecs-task-definition }}
    #     container-name: ${{ inputs.container-name }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ inputs.ecs-service }}
    #     cluster: ${{ inputs.ecs-cluster }}
    #     wait-for-service-stability: true
